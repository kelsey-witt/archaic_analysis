"""
This script was written by Kelsey Witt in November 2021. The goal of this script is
to calculate the power and specificity of an allele counting method to identify
archaic alleles. Power is the percentage of true positives that are found in the 
estimated set. Specificity is the percentage of sites that were not introgressed from
archaic humans that were specifically identified as not introgressed by the allele
counting method

Usage: python3 trueSiteCalculations.py

This script uses three input files: the vcf file generated by the archaic
introgression simulation (vcfFile, line 43), the list of truly archaic introgressed
sites from the simulation (trueInfile, line 41), and a list of estimated introgressed
sites using the allele counting method (estimatedInfile, line 42). The first two
files are generated with the script "lewontin_sim_truesites.py" and the last
is generated with "archaic_allele_counter_sim_truesitevsvcf.py".

The output is a tab-delimited file. Each line represents a different replicate and 
population combo (EUR or EAS) and includes the replicate number, population, the number
of estimated introgressed sites, the number of true introgressed sites, the number
of true introgressed sites not found in the sampled Neanderthal, the number of
sites that are true introgressed sites and found in the estimates sites list,
the number of false positives in the estimated list, the percentage of those that
can be explained by not being found in the sampled Neanderthal, the power for all
true introgressed sites, the power for true introgressed sites that are shared with
the sampled Neanderthal (a requirement for the allele counting script), and 
the specificity. The file name, outLine, is in line 34.
"""

#Power is % of true positives found in estimated set. Specificity is # of sites not called as archaic introgression (len-est sites)/
# number of sites not called as archaic introgression + false positives
outFile = "archaic_kfav_sim_trueSiteVSvcf_comparison.txt"
h = open(outFile, 'w')
outLine = ["rep","pop","est archaic sites","true archaic sites","true archaic sites not in nea","# est and true shared sites", \
"# est false positives","% True sites not in nea","Power","Power Nea Shared","Specificity"]
outputLine = "\t".join(outLine) + "\n"
h.write(outputLine)
popRange = {"EUR": [204,402], "EAS": [402,608]}

for sim in range(1,21):
    trueInfile = "nea_sim_trueSiteVSvcf_trueSiteList" + str(sim) + ".txt"
    estimatedInfile = "nea_sim_trueSiteVSvcf_estimatedSiteList" + str(sim) + ".txt"
    vcfFile = "archaic_kfav_sim_trueSiteVSvcf_" + str(sim) + ".vcf"
    variableSites = 0
    with open(vcfFile) as j:
        for line in j:
            if "#" not in line:
                variableSites += 1
    for pop in popRange:
        trueSNPs = set()
        trueNeaSNPs = set()
        trueNonNeaSNPs = set()
        estimatedSNPs = set()
        with open(trueInfile) as f:
            next(f)
            for line in f:
                spline = line[:-1].split(sep="\t")
                position,_,pops,nea = spline[0:4]
                if pops == "both" or pops[0:3].upper() == pop:
                    trueSNPs.add(position)
                    if nea == "no":
                        trueNonNeaSNPs.add(position)
                    elif nea == "yes":
                        trueNeaSNPs.add(position)
        with open(estimatedInfile) as g:
            inPop = False
            next(g)
            for line in g:
                spline = line[:-1].split(sep="\t")
                position,leaves = spline[0:2]
                leafList = leaves.split(sep=",")
                for leaf in leafList[:-1]:
                    if popRange[pop][0]<int(leaf)<popRange[pop][1]:
                        inPop = True
                        continue
                if inPop:
                    estimatedSNPs.add(position)
        truePositives = estimatedSNPs.intersection(trueSNPs)
        trueNeaPositives = estimatedSNPs.intersection(trueNeaSNPs)
        falsePositives = estimatedSNPs.difference(trueSNPs)
        percentNotNea = len(trueNonNeaSNPs)/len(trueSNPs)
        powerCalc = len(truePositives)/len(trueSNPs)
        powerNeaCalc = len(truePositives)/len(trueNeaSNPs)
        specificityCalc =(variableSites-len(truePositives))/(variableSites-len(truePositives)+len(falsePositives))
        outLine = [str(sim),pop,str(len(estimatedSNPs)),str(len(trueSNPs)),str(len(trueNonNeaSNPs)),str(len(truePositives)),str(len(falsePositives)),str(percentNotNea),str(powerCalc),str(powerNeaCalc),str(specificityCalc)]
        outputLine = "\t".join(outLine)+"\n"
        h.write(outputLine)
h.close()
