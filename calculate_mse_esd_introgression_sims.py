"""
This script was written by Kelsey Witt Dillon in March 2021. The goal of this script
is to calculate the mean squared error and euclidean error for how well archaic coverage
ratios between East Asians and Europeans match up with simulated data at various sample
sizes.

The input file is a set of files with mean and standard deviations of replicates of a
simulation. These files are generated by cvg_ratio_mean_stdev_sims.py. The full list
of models tested is included in the "sims" lsit (line 25) and there should be one file for each
model. The "empiricalMeans" list shows the empirical data that is being compared,
and "sample_sizes" lists the samples that are tested in the modeled data.

Usage: python3 calculate_mse_esd_introgression_sims.py

This script generates a csv file labeled "nea_introgression_sims_mse_esd.csv". Each row 
represents a simulation model, and the columns are the amount of the first pulse of introgression,
the amount of the second pulse of introgression, the ratio at each sample size specified in 
"sample_size", the mean squared error and the Euclidean error.
"""

import csv
import numpy as np
import math
import statistics

sims=["1p0.01_2p0.0","1p0.01_2p0.001","1p0.01_2p0.002","1p0.01_2p0.005","1p0.01_2p0.008","1p0.01_2p0.01","1p0.015_2p0.0","1p0.015_2p0.001", \
     "1p0.015_2p0.002","1p0.015_2p0.005","1p0.015_2p0.008","1p0.015_2p0.01","1p0.02_2p0.0","1p0.02_2p0.001","1p0.02_2p0.002","1p0.02_2p0.005", \
         "1p0.02_2p0.008","1p0.02_2p0.01","1p0.025_2p0.0","1p0.025_2p0.001","1p0.025_2p0.002","1p0.025_2p0.005","1p0.025_2p0.008", \
             "1p0.025_2p0.01","1p0.03_2p0.0","1p0.03_2p0.001","1p0.03_2p0.002","1p0.03_2p0.005","1p0.03_2p0.008","1p0.03_2p0.01","1p0.04_2p0.0", \
                  "1p0.04_2p0.001","1p0.04_2p0.002","1p0.04_2p0.005","1p0.04_2p0.008","1p0.04_2p0.01"]

outfile = "nea_introgression_sims_mse_esd.csv"
empiricalMeans = [1.23, 1.15, 1.10, 1.02, 0.976, 0.954, 0.942, 0.936, 0.930]
sample_sizes = [1,5,10,25,50,75,100,125,150]
with open(outfile, 'w') as f:
    headerCols = ["First Pulse","Second Pulse","n=1","n=5","n=10","n=25","n=50","n=75","n=100","n=125","n=150","Mean Squared Error","Euclidean Standardized Distance"]
    headerLine = ",".join(headerCols)+"\n"
    f.write(headerLine)
    for model in sims:
        meansPerRep = {}
        stDevPerRep = {}
        for ss in sample_sizes:
            meansPerRep[ss] = []
            stDevPerRep[ss] = []
        outCols = []
        ssMeans = []
        ssStDev = []
        infile = "nea_introgression_sim_" + model + "_mean_sd.txt"
        pulses = model.split(sep="_")
        pulse1 = pulses[0][2:]
        pulse2 = pulses[1][2:]
        with open(infile) as g:
            for line in g:
                spline = line.split()
                strVals = spline[3:12]
                strVals = list(map(float, strVals))
                for i in range(0,len(sample_sizes)):
                    ss = sample_sizes[i]
                    if "mean" in line:
                        meansPerRep[ss].append(strVals[i])
                    elif "stdev" in line:
                        stDevPerRep[ss].append(strVals[i])
        for ss in sample_sizes:
            ssMean = statistics.mean(meansPerRep[ss])    
            ssMeans.append(ssMean)
            #square the SD to get the variance and then we can add the variances and do the square root to get the combined SD
            varSum = 0
            for sd in stDevPerRep[ss]:
                varSum += sd**2
            combinedSD = math.sqrt(varSum)
            ssStDev.append(combinedSD)
        MSEmean = np.square(np.subtract(empiricalMeans, ssMeans)).mean()
        sumSquares = 0
        for i in range(0,len(ssStDev)):
            empMean = empiricalMeans[i]
            simMean = ssMeans[i]
            simSD = ssStDev[i]
            normDiffSq = ((simMean-empMean)/simSD) ** 2
            sumSquares += normDiffSq
        euclidError = math.sqrt(sumSquares)
        ssMeans = list(map(str, ssMeans))
        outCols = [pulse1,pulse2] + ssMeans + [str(MSEmean),str(euclidError)]
        outLine = ",".join(outCols)+"\n"
        f.write(outLine)
